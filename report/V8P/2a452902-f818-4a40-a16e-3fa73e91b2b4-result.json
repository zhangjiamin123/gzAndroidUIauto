{"name": "V8P 开流", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: 'POST /element' cannot be proxied to UiAutomator2 server because the instrumentation process is not running (probably crashed). Check the server log and/or the logcat output for more details", "trace": "self = <test_gzAndroidAuto.TestOpenFlow object at 0x000001BA5DD4A700>\n\n    @allure.title('V8P 开流')\n    @allure.story('用户循环测试V8P的开流-关流，即多次开流')\n    def test_v8p_open_flow(self):\n        \"\"\"\n        :前提条件：① 账号下要绑定V8P设备；② 关闭消息通知，不要弹push，会遮挡按钮的点击\n        :设备为在线状态，可以开流\n        :网络稳定，可以考虑放在屏蔽箱里执行\n        :电量充足，不能关机\n        :如果中间有升级弹窗出现，点击取消或忽略本次升级，其他弹窗类似\n        \"\"\"\n        # 获取v8p设备的名字\n        dev_name = gz_public.get_devices_list(model='V8P')\n    \n        with allure.step('step1: 在设备列表中滑动找到要开流的设备，例如，v8p'):\n>           master.find_element_by_android_uiautomator(\n                'new UiScrollable(new UiSelector().scrollable(true)).scrollIntoView(new UiSelector().text('\n                '\"%s\")).scrollToEnd(10,5)' % dev_name)\n\ntest_gzAndroidAuto.py:1045: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\appium\\webdriver\\extensions\\search_context\\android.py:147: in find_element_by_android_uiautomator\n    return self.find_element(by=MobileBy.ANDROID_UIAUTOMATOR, value=uia_string)\nvenv\\Lib\\site-packages\\appium\\webdriver\\webdriver.py:414: in find_element\n    return self.execute(RemoteCommand.FIND_ELEMENT, {'using': by, 'value': value})['value']\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\nvenv\\Lib\\site-packages\\appium\\webdriver\\errorhandler.py:31: in check_response\n    raise wde\nvenv\\Lib\\site-packages\\appium\\webdriver\\errorhandler.py:26: in check_response\n    super().check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x000001BA5DCD6040>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"An unknown server-side error occurred while pro...\\\\\\node_modules\\\\\\\\appium\\\\\\\\node_modules\\\\\\\\appium-base-driver\\\\\\\\lib\\\\\\\\basedriver\\\\\\\\commands\\\\\\\\find.js:53:10)\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: 'POST /element' cannot be proxied to UiAutomator2 server because the instrumentation process is not running (probably crashed). Check the server log and/or the logcat output for more details\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: WebDriverException"}, "description": "\n        :前提条件：① 账号下要绑定V8P设备；② 关闭消息通知，不要弹push，会遮挡按钮的点击\n        :设备为在线状态，可以开流\n        :网络稳定，可以考虑放在屏蔽箱里执行\n        :电量充足，不能关机\n        :如果中间有升级弹窗出现，点击取消或忽略本次升级，其他弹窗类似\n        ", "steps": [{"name": "step1: 在设备列表中滑动找到要开流的设备，例如，v8p", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: 'POST /element' cannot be proxied to UiAutomator2 server because the instrumentation process is not running (probably crashed). Check the server log and/or the logcat output for more details\n\n", "trace": "  File \"C:\\Users\\Hello\\PycharmProjects\\gz_ui_auto\\test_gzAndroidAuto.py\", line 1045, in test_v8p_open_flow\n    master.find_element_by_android_uiautomator(\n  File \"C:\\Users\\Hello\\PycharmProjects\\gz_ui_auto\\venv\\Lib\\site-packages\\appium\\webdriver\\extensions\\search_context\\android.py\", line 147, in find_element_by_android_uiautomator\n    return self.find_element(by=MobileBy.ANDROID_UIAUTOMATOR, value=uia_string)\n  File \"C:\\Users\\Hello\\PycharmProjects\\gz_ui_auto\\venv\\Lib\\site-packages\\appium\\webdriver\\webdriver.py\", line 414, in find_element\n    return self.execute(RemoteCommand.FIND_ELEMENT, {'using': by, 'value': value})['value']\n  File \"C:\\Users\\Hello\\PycharmProjects\\gz_ui_auto\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 321, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\Hello\\PycharmProjects\\gz_ui_auto\\venv\\Lib\\site-packages\\appium\\webdriver\\errorhandler.py\", line 31, in check_response\n    raise wde\n  File \"C:\\Users\\Hello\\PycharmProjects\\gz_ui_auto\\venv\\Lib\\site-packages\\appium\\webdriver\\errorhandler.py\", line 26, in check_response\n    super().check_response(response)\n  File \"C:\\Users\\Hello\\PycharmProjects\\gz_ui_auto\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 242, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1683681251319, "stop": 1683681251324}], "attachments": [{"name": "log", "source": "766a3492-d459-4573-bebc-db054dd31315-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "__pytest_repeat_step_number", "value": "36"}], "start": 1683681250619, "stop": 1683681251325, "uuid": "16bbbeb5-8bf6-4cf4-94bd-8c5a6a4b7dd3", "historyId": "c65c0e3b2d6ad36ae917e707898ca4df", "testCaseId": "9d77a5782cb0ae047702eff186868885", "fullName": "test_gzAndroidAuto.TestOpenFlow#test_v8p_open_flow", "labels": [{"name": "story", "value": "用户循环测试V8P的开流-关流，即多次开流"}, {"name": "feature", "value": "开流专项"}, {"name": "suite", "value": "test_gzAndroidAuto"}, {"name": "subSuite", "value": "TestOpenFlow"}, {"name": "host", "value": "LAPTOP-V9T4AUSR"}, {"name": "thread", "value": "56588-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_gzAndroidAuto"}]}